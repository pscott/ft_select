!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARFLAGS	libft/Makefile	/^ARFLAGS	:=$/;"	m
BASE_16_LOW	libft/includes/ft_printf.h	/^# define BASE_16_LOW /;"	d
BASE_16_UP	libft/includes/ft_printf.h	/^# define BASE_16_UP /;"	d
BASE_8	libft/includes/ft_printf.h	/^# define BASE_8 /;"	d
CC	Makefile	/^CC			:= gcc$/;"	m
CC	libft/Makefile	/^CC		:= gcc$/;"	m
CC	libterm/Makefile	/^CC		:= gcc$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS	:= -Wall -Werror -Wextra $(INCLDIR)$/;"	m
CFLAGS	libterm/Makefile	/^CFLAGS	:= -Wall -Werror -I $(INCLDIR) -I $(LIBDIR)\/includes$/;"	m
CLEAR	libterm/includes/libterm.h	/^# define CLEAR /;"	d
COMP	Makefile	/^COMP		:= $(CC) $(WFLAGS) $(INCL) $(LIBS)$/;"	m
CONV	libft/Makefile	/^CONV	:= $(addprefix $(CONVDIR)\/, $(CONV))$/;"	m
CONV	libft/Makefile	/^CONV	:= conv_helper.c converters.c$/;"	m
CONVDIR	libft/Makefile	/^CONVDIR		:= srcs\/conversion$/;"	m
DEPS	Makefile	/^DEPS		:= includes\/ft_select.h Makefile$/;"	m
DEPS	libft/Makefile	/^DEPS	:= Makefile includes\/ft_printf.h includes\/libft.h$/;"	m
DEPS	libterm/Makefile	/^DEPS	:= Makefile $(INCLDIR)\/libterm.h ..\/libft\/libft.a$/;"	m
ENV	Makefile	/^ENV			:= env$/;"	m
ERASE_ENDLINE	libterm/includes/libterm.h	/^# define ERASE_ENDLINE /;"	d
ERR	Makefile	/^ERR			:= error_usage.c$/;"	m
ERR	libterm/Makefile	/^ERR		:= error_attr.c error_tgetent.c error_getenv.c error_getstr.c \\$/;"	m
ERRDIR	libterm/Makefile	/^ERRDIR		:= $(SRCDIR)\/errors$/;"	m
ERRS	Makefile	/^ERRS		:= $(addprefix $(SRCDIR)\/errors\/, $(ERR))$/;"	m
ERRS	libterm/Makefile	/^ERRS	:= $(addprefix $(ERRDIR)\/, $(ERR))$/;"	m
FORM	libft/Makefile	/^FORM	:= $(addprefix $(FORMDIR)\/, $(FORM))$/;"	m
FORM	libft/Makefile	/^FORM	:= format_int.c format_char.c format_unsigned.c format_string.c \\$/;"	m
FORMDIR	libft/Makefile	/^FORMDIR		:= srcs\/formats$/;"	m
FT_PRINTF_H	libft/includes/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
FT_SELECT_H	includes/ft_select.h	/^# define FT_SELECT_H$/;"	d
FT_TERMCAP_H	libterm/includes/libterm.h	/^# define FT_TERMCAP_H$/;"	d
GETLEN	libft/Makefile	/^GETLEN	:= $(addprefix $(GETLENDIR)\/, $(GETLEN))$/;"	m
GETLEN	libft/Makefile	/^GETLEN	:= get_len.c get_ulen.c$/;"	m
GETLENDIR	libft/Makefile	/^GETLENDIR	:= srcs\/get_len$/;"	m
HELPERS	libft/Makefile	/^HELPERS	:= $(addprefix $(HELPERSDIR)\/, $(HELPERS))$/;"	m
HELPERS	libft/Makefile	/^HELPERS	:= ft_atoi_move.c null_data.c ft_special_memset.c ft_strncat_move.c \\$/;"	m
HELPERSDIR	libft/Makefile	/^HELPERSDIR	:= srcs\/helpers$/;"	m
INCL	Makefile	/^INCL		:= -I includes\/ -I libft\/includes\/ -I libterm\/includes\/$/;"	m
INCLDIR	libft/Makefile	/^INCLDIR		:= -I includes\/$/;"	m
INCLDIR	libterm/Makefile	/^INCLDIR		:= includes$/;"	m
INCREM	libft/Makefile	/^INCREM	:= $(addprefix $(INCREMDIR)\/, $(INCREM))$/;"	m
INCREM	libft/Makefile	/^INCREM	:= increm_format.c increm_string.c $/;"	m
INCREMDIR	libft/Makefile	/^INCREMDIR	:= srcs\/incrementers$/;"	m
INIT_LEN	libft/includes/ft_printf.h	/^# define INIT_LEN /;"	d
ITOA	libft/Makefile	/^ITOA	:= $(addprefix $(ITOADIR)\/, $(ITOA))$/;"	m
ITOA	libft/Makefile	/^ITOA	:= ft_nitoa.c  ft_litoa.c ft_llitoa.c ft_hitoa.c ft_hhitoa.c ft_uitoa.c$/;"	m
ITOADIR	libft/Makefile	/^ITOADIR		:= srcs\/ft_itoa$/;"	m
L	libft/includes/ft_printf.h	/^# define L /;"	d
LIBDIR	libft/Makefile	/^LIBDIR		:= srcs\/libft$/;"	m
LIBDIR	libterm/Makefile	/^LIBDIR		:= ..\/libft$/;"	m
LIBFT_H	libft/includes/libft.h	/^# define LIBFT_H$/;"	d
LIBS	Makefile	/^LIBS		:= -L libft -lft -L libterm -lterm -ltermcap$/;"	m
LIBS	libft/Makefile	/^LIBS	:= $(addprefix $(LIBDIR)\/, $(LIBS))$/;"	m
LIBS	libft/Makefile	/^LIBS	:= ft_atoi.c  ft_bzero.c  ft_isalnum.c  ft_isalpha.c  ft_isascii.c \\$/;"	m
LIBS	libterm/Makefile	/^LIBS	:= -L $(LIBDIR) -lft -ltermcap$/;"	m
LL	libft/includes/ft_printf.h	/^# define LL /;"	d
MOVE_CURSOR	libterm/includes/libterm.h	/^# define MOVE_CURSOR /;"	d
NAME	Makefile	/^NAME		:= ft_select$/;"	m
NAME	libft/Makefile	/^NAME	:= libft.a$/;"	m
NAME	libterm/Makefile	/^NAME	:= libterm.a$/;"	m
OBJS	Makefile	/^OBJS		:= $(SRCS:.c=.o)$/;"	m
OBJS	libft/Makefile	/^OBJS	:= $(SRCS:.c=.o)$/;"	m
OBJS	libterm/Makefile	/^OBJS	:= $(SOURCE:.c=.o)$/;"	m
OPT	Makefile	/^OPT			:= ew$/;"	m
PRINTF	libft/Makefile	/^PRINTF	:= $(addprefix $(SRCDIR)\/, $(PRINTF))$/;"	m
PRINTF	libft/Makefile	/^PRINTF	:= ft_printf.c parse_struct.c getters.c spec_init.c \\$/;"	m
PRINT_LINE	libterm/includes/libterm.h	/^# define PRINT_LINE /;"	d
REALLOC_FACTOR	libft/includes/libft.h	/^# define REALLOC_FACTOR /;"	d
RM	Makefile	/^RM			:= rm -rf$/;"	m
RM	libft/Makefile	/^RM		:= rm -rf$/;"	m
RM	libterm/Makefile	/^RM		:= rm -rf$/;"	m
SOURCE	libterm/Makefile	/^SOURCE	:= $(SRCS) $(ERRS)$/;"	m
SRC	Makefile	/^SRC			:= main.c linked_list.c free.c$/;"	m
SRC	libterm/Makefile	/^SRC		:= execute_cap.c termcap_settings.c$/;"	m
SRCDIR	Makefile	/^SRCDIR		:= srcs$/;"	m
SRCDIR	libft/Makefile	/^SRCDIR		:= srcs$/;"	m
SRCDIR	libterm/Makefile	/^SRCDIR		:= srcs$/;"	m
SRCS	Makefile	/^SRCS		:= $(addprefix $(SRCDIR)\/, $(SRC)) $(ERRS)$/;"	m
SRCS	libft/Makefile	/^SRCS	:= $(LIBS) $(ITOA) $(PRINTF) $(CONV) $(FORM) $(GETLEN) $(HELPERS) \\$/;"	m
SRCS	libterm/Makefile	/^SRCS	:= $(addprefix $(SRCDIR)\/, $(SRC))$/;"	m
UL	libft/includes/ft_printf.h	/^# define UL /;"	d
ULL	libft/includes/ft_printf.h	/^# define ULL /;"	d
WFLAGS	Makefile	/^WFLAGS		:= -Wall -Wextra$/;"	m
add_node	srcs/linked_list.c	/^void		add_node(t_arg_list *new, t_list_addr *addr)$/;"	f
check_conv_value	libft/srcs/conversion/conv_helper.c	/^void			check_conv_value(t_arg *specs, char *value)$/;"	f
check_if_flags	libft/srcs/getters.c	/^void	check_if_flags(t_arg *specs, char c, char **format, va_list *arg)$/;"	f
choose_value	libft/srcs/helpers/choose_value.c	/^LL	choose_value(t_arg *specs, LL value)$/;"	f
col	libterm/includes/libterm.h	/^				int	col;$/;"	m	struct:s_pos
content	libft/includes/libft.h	/^	void			*content;$/;"	m	struct:s_list
content_size	libft/includes/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
conv_val	libft/includes/ft_printf.h	/^	char		*conv_val;$/;"	m	struct:s_arg
convert	libft/srcs/conversion/converters.c	/^char	*convert(ULL num, int base, char *rep)$/;"	f
convert_p	libft/srcs/conversion/converters.c	/^char	*convert_p(L num, int base, char *rep)$/;"	f
create_addr	srcs/main.c	/^t_list_addr	*create_addr(void)$/;"	f
create_list	srcs/linked_list.c	/^t_arg_list	*create_list(char **av, t_list_addr *addr)$/;"	f
create_node	srcs/linked_list.c	/^t_arg_list	*create_node(char *name)$/;"	f
create_specs	libft/srcs/spec_init.c	/^t_arg	*create_specs(t_arg *specs)$/;"	f
data_len	libft/includes/ft_printf.h	/^	int			data_len;$/;"	m	struct:s_arg
dbl	libft/includes/ft_printf.h	/^	int			dbl;$/;"	m	struct:s_arg
err_getattr	libterm/srcs/errors/error_attr.c	/^int		err_getattr(void)$/;"	f
err_no_database	libterm/srcs/errors/error_tgetent.c	/^int		err_no_database(void)$/;"	f
err_no_env	libterm/srcs/errors/error_getenv.c	/^int		err_no_env(void)$/;"	f
err_no_str	libterm/srcs/errors/error_getstr.c	/^int		err_no_str(char *cap)$/;"	f
err_noentry	libterm/srcs/errors/error_tgetent.c	/^int		err_noentry(void)$/;"	f
err_not_terminal	libterm/srcs/errors/error_isatty.c	/^int		err_not_terminal(void)$/;"	f
err_setattr	libterm/srcs/errors/error_attr.c	/^int		err_setattr(void)$/;"	f
err_usage	srcs/errors/error_usage.c	/^int	err_usage(void)$/;"	f
execute_str	libterm/srcs/execute_cap.c	/^int		execute_str(char *cap, struct termios *saved_attr)$/;"	f
extra	libft/includes/ft_printf.h	/^	int			extra;$/;"	m	struct:s_arg
fill	libft/includes/ft_printf.h	/^	char		fill;$/;"	m	struct:s_arg
fill_char	libft/srcs/formats/format_char.c	/^void	fill_char(int perc_len, t_arg *specs, char *value)$/;"	f
fill_char_left	libft/srcs/formats/format_char.c	/^void	fill_char_left(int perc_len, t_arg *specs, char *value)$/;"	f
fill_int	libft/srcs/formats/format_int.c	/^static void			fill_int(int perc_len, t_arg *specs, LL value)$/;"	f	file:
fill_int_left	libft/srcs/formats/format_int.c	/^static void			fill_int_left(int perc_len, t_arg *specs, LL value)$/;"	f	file:
fill_itoa	libft/srcs/libft/ft_itoa.c	/^static void	fill_itoa(int n, char *src, int len)$/;"	f	file:
fill_len	libft/includes/ft_printf.h	/^	int			fill_len;$/;"	m	struct:s_arg
fill_string	libft/srcs/formats/format_conv.c	/^static void		fill_string(t_arg *specs, char *value)$/;"	f	file:
fill_string	libft/srcs/formats/format_p.c	/^static void		fill_string(t_arg *specs, L value)$/;"	f	file:
fill_string	libft/srcs/formats/format_string.c	/^static void	fill_string(t_arg *specs, char *value)$/;"	f	file:
fill_string_left	libft/srcs/formats/format_conv.c	/^static void		fill_string_left(t_arg *specs, char *value)$/;"	f	file:
fill_string_left	libft/srcs/formats/format_p.c	/^static void		fill_string_left(t_arg *specs, L value)$/;"	f	file:
fill_string_left	libft/srcs/formats/format_string.c	/^static void	fill_string_left(t_arg *specs, char *value)$/;"	f	file:
fill_uint	libft/srcs/formats/format_unsigned.c	/^static void	fill_uint(int perc_len, t_arg *specs, ULL value)$/;"	f	file:
fill_uint_left	libft/srcs/formats/format_unsigned.c	/^static void	fill_uint_left(int perc_len, t_arg *specs, ULL value)$/;"	f	file:
float_to_string	libft/srcs/formats/format_float.c	/^static void	float_to_string(t_arg *specs, double f)$/;"	f	file:
format_char	libft/srcs/formats/format_char.c	/^void	format_char(t_arg *specs, char value)$/;"	f
format_conv	libft/srcs/formats/format_conv.c	/^void			format_conv(t_arg *specs, LL value)$/;"	f
format_float	libft/srcs/formats/format_float.c	/^void		format_float(t_arg *specs, va_list *arg)$/;"	f
format_int	libft/srcs/formats/format_int.c	/^void				format_int(t_arg *specs, LL value)$/;"	f
format_p	libft/srcs/formats/format_p.c	/^void			format_p(t_arg *specs, L value)$/;"	f
format_string	libft/srcs/formats/format_string.c	/^void		format_string(t_arg *specs, char *value)$/;"	f
format_unsigned	libft/srcs/formats/format_unsigned.c	/^void		format_unsigned(t_arg *specs, ULL value)$/;"	f
free_list	srcs/free.c	/^void		free_list(t_list_addr *addr)$/;"	f
free_node	srcs/free.c	/^static void	free_node(t_arg_list *lst)$/;"	f	file:
front_back_split	libft/srcs/libft/ft_lstsort.c	/^static void		front_back_split(t_list *src, t_list **fref, t_list **bref)$/;"	f	file:
ft_atoi	libft/srcs/libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/;"	f
ft_atoi_move	libft/srcs/helpers/ft_atoi_move.c	/^int		ft_atoi_move(char **str)$/;"	f
ft_bzero	libft/srcs/libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_hhitoa	libft/srcs/ft_itoa/ft_hhitoa.c	/^void			ft_hhitoa(t_arg *specs, signed char n)$/;"	f
ft_hitoa	libft/srcs/ft_itoa/ft_hitoa.c	/^void			ft_hitoa(t_arg *specs, short int n)$/;"	f
ft_isalnum	libft/srcs/libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/;"	f
ft_isalpha	libft/srcs/libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/;"	f
ft_isascii	libft/srcs/libft/ft_isascii.c	/^int		ft_isascii(int c)$/;"	f
ft_isdigit	libft/srcs/libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/;"	f
ft_isprint	libft/srcs/libft/ft_isprint.c	/^int		ft_isprint(int c)$/;"	f
ft_itoa	libft/srcs/libft/ft_itoa.c	/^char		*ft_itoa(int n)$/;"	f
ft_itoa_spec	libft/srcs/parse_struct.c	/^void	ft_itoa_spec(t_arg *specs, LL value)$/;"	f
ft_litoa	libft/srcs/ft_itoa/ft_litoa.c	/^void			ft_litoa(t_arg *specs, L n)$/;"	f
ft_llitoa	libft/srcs/ft_itoa/ft_llitoa.c	/^void			ft_llitoa(t_arg *specs, LL n)$/;"	f
ft_lstadd	libft/srcs/libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/;"	f
ft_lstappend	libft/srcs/libft/ft_lstappend.c	/^void	ft_lstappend(t_list **lst, t_list *new)$/;"	f
ft_lstdel	libft/srcs/libft/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstdelone	libft/srcs/libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void *, size_t))$/;"	f
ft_lstiter	libft/srcs/libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *elem))$/;"	f
ft_lstlen	libft/srcs/libft/ft_lstlen.c	/^size_t	ft_lstlen(t_list **head)$/;"	f
ft_lstmap	libft/srcs/libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, t_list *(*f)(t_list *elem))$/;"	f
ft_lstnew	libft/srcs/libft/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t content_size)$/;"	f
ft_lstrmdup	libft/srcs/libft/ft_lstrmdup.c	/^void			ft_lstrmdup(t_list *lst)$/;"	f
ft_lstsort	libft/srcs/libft/ft_lstsort.c	/^void			ft_lstsort(t_list **head)$/;"	f
ft_memalloc	libft/srcs/libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/;"	f
ft_memccpy	libft/srcs/libft/ft_memccpy.c	/^void	*ft_memccpy(void *restrict d, const void *restrict s, int c, size_t n)$/;"	f
ft_memchr	libft/srcs/libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/srcs/libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/srcs/libft/ft_memcpy.c	/^void	*ft_memcpy(void *restrict dst, const void *restrict src, size_t n)$/;"	f
ft_memdel	libft/srcs/libft/ft_memdel.c	/^void	ft_memdel(void **ap)$/;"	f
ft_memmove	libft/srcs/libft/ft_memmove.c	/^void	*ft_memmove(void *s1, const void *s2, size_t n)$/;"	f
ft_memset	libft/srcs/libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_nitoa	libft/srcs/ft_itoa/ft_nitoa.c	/^void			ft_nitoa(t_arg *specs, int n)$/;"	f
ft_printf	libft/srcs/ft_printf.c	/^int				ft_printf(const char *restrict f, ...)$/;"	f
ft_putchar	libft/srcs/libft/ft_putchar.c	/^void	ft_putchar(char c)$/;"	f
ft_putchar_fd	libft/srcs/libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl	libft/srcs/libft/ft_putendl.c	/^void	ft_putendl(char const *str)$/;"	f
ft_putendl_fd	libft/srcs/libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/;"	f
ft_putnbr	libft/srcs/libft/ft_putnbr.c	/^void	ft_putnbr(int nb)$/;"	f
ft_putnbr_fd	libft/srcs/libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr	libft/srcs/libft/ft_putstr.c	/^void	ft_putstr(char const *str)$/;"	f
ft_putstr_fd	libft/srcs/libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/;"	f
ft_realloc	libft/srcs/libft/ft_realloc.c	/^char	*ft_realloc(void *data, size_t current_data_size,$/;"	f
ft_select	srcs/main.c	/^int		ft_select(char **av)$/;"	f
ft_special_memset	libft/srcs/helpers/ft_special_memset.c	/^void	ft_special_memset(t_arg *specs, char c, int len)$/;"	f
ft_strcat	libft/srcs/libft/ft_strcat.c	/^char	*ft_strcat(char *restrict s1, const char *restrict s2)$/;"	f
ft_strchr	libft/srcs/libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strclr	libft/srcs/libft/ft_strclr.c	/^void	ft_strclr(char *s)$/;"	f
ft_strcmp	libft/srcs/libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strcpy	libft/srcs/libft/ft_strcpy.c	/^char	*ft_strcpy(char *dst, const char *src)$/;"	f
ft_strdel	libft/srcs/libft/ft_strdel.c	/^void	ft_strdel(char **as)$/;"	f
ft_strdup	libft/srcs/libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strequ	libft/srcs/libft/ft_strequ.c	/^int	ft_strequ(char const *s1, char const *s2)$/;"	f
ft_striter	libft/srcs/libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *s))$/;"	f
ft_striteri	libft/srcs/libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char *))$/;"	f
ft_strjoin	libft/srcs/libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/srcs/libft/ft_strlcat.c	/^size_t	ft_strlcat(char *restrict dst, const char *restrict src, size_t size)$/;"	f
ft_strlen	libft/srcs/libft/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmap	libft/srcs/libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/;"	f
ft_strmapi	libft/srcs/libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncat	libft/srcs/libft/ft_strncat.c	/^char	*ft_strncat(char *restrict s1, const char *restrict s2, size_t n)$/;"	f
ft_strncat_move	libft/srcs/helpers/ft_strncat_move.c	/^void	ft_strncat_move(char *src, int n, t_arg *specs)$/;"	f
ft_strncmp	libft/srcs/libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strncpy	libft/srcs/libft/ft_strncpy.c	/^char	*ft_strncpy(char *dst, const char *src, size_t len)$/;"	f
ft_strndup	libft/srcs/libft/ft_strndup.c	/^char		*ft_strndup(const char *s1, size_t n)$/;"	f
ft_strnequ	libft/srcs/libft/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, size_t n)$/;"	f
ft_strnew	libft/srcs/libft/ft_strnew.c	/^char		*ft_strnew(size_t size)$/;"	f
ft_strnstr	libft/srcs/libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/srcs/libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strrev	libft/srcs/libft/ft_strrev.c	/^char	*ft_strrev(const char *s)$/;"	f
ft_strsplit	libft/srcs/libft/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char *c)$/;"	f
ft_strstr	libft/srcs/libft/ft_strstr.c	/^char	*ft_strstr(const char *haystack, const char *needle)$/;"	f
ft_strsub	libft/srcs/libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start, size_t len)$/;"	f
ft_strtrim	libft/srcs/libft/ft_strtrim.c	/^char				*ft_strtrim(char const *s)$/;"	f
ft_tolower	libft/srcs/libft/ft_tolower.c	/^int		ft_tolower(int c)$/;"	f
ft_toupper	libft/srcs/libft/ft_toupper.c	/^int		ft_toupper(int c)$/;"	f
ft_uitoa	libft/srcs/ft_itoa/ft_uitoa.c	/^void		ft_uitoa(t_arg *specs, unsigned long long n)$/;"	f
ft_uitoa_spec	libft/srcs/helpers/unsigned_helper.c	/^void	ft_uitoa_spec(t_arg *specs, ULL value)$/;"	f
get_flags	libft/srcs/getters.c	/^int		get_flags(t_arg *specs, char **format, va_list *arg)$/;"	f
get_hhlen	libft/srcs/get_len/get_len.c	/^int		get_hhlen(signed char value)$/;"	f
get_hlen	libft/srcs/get_len/get_len.c	/^int		get_hlen(short int value)$/;"	f
get_len	libft/srcs/get_len/get_len.c	/^int		get_len(int value)$/;"	f
get_lh	libft/srcs/getters.c	/^void	get_lh(char **format, t_arg *specs)$/;"	f
get_llen	libft/srcs/get_len/get_len.c	/^int		get_llen(L value)$/;"	f
get_lllen	libft/srcs/get_len/get_len.c	/^int		get_lllen(LL value)$/;"	f
get_my_len	libft/srcs/libft/ft_itoa.c	/^static int	get_my_len(int n)$/;"	f	file:
get_ulen	libft/srcs/get_len/get_ulen.c	/^int		get_ulen(unsigned int value)$/;"	f
get_ullen	libft/srcs/get_len/get_ulen.c	/^int		get_ullen(UL value)$/;"	f
get_ulllen	libft/srcs/get_len/get_ulen.c	/^int		get_ulllen(ULL value)$/;"	f
h	libft/includes/ft_printf.h	/^	int			h;$/;"	m	struct:s_arg
h_min	libft/srcs/ft_itoa/ft_hitoa.c	/^static void		h_min(t_arg *specs)$/;"	f	file:
handle_perc	libft/srcs/parse_struct.c	/^int		handle_perc(char **format, t_arg *specs, va_list *arg)$/;"	f
hash	libft/includes/ft_printf.h	/^	int			hash;$/;"	m	struct:s_arg
head	includes/ft_select.h	/^	struct s_arg_list	*head;$/;"	m	struct:s_list_addr	typeref:struct:s_list_addr::s_arg_list
hh_min	libft/srcs/ft_itoa/ft_hhitoa.c	/^static void		hh_min(t_arg *specs)$/;"	f	file:
how_long	libft/srcs/libft/ft_strsplit.c	/^static	size_t	how_long(char const *s, char *c, size_t *j)$/;"	f	file:
how_many	libft/srcs/libft/ft_strsplit.c	/^static size_t	how_many(char const *s, char *c)$/;"	f	file:
i_min	libft/srcs/ft_itoa/ft_nitoa.c	/^static void		i_min(t_arg *specs)$/;"	f	file:
increm_format	libft/srcs/incrementers/increm_format.c	/^void	increm_format(char **s1, int len)$/;"	f
increm_string	libft/srcs/incrementers/increm_string.c	/^void	increm_string(t_arg *specs, int len)$/;"	f
init_specs	libft/srcs/spec_init.c	/^void	init_specs(t_arg *specs)$/;"	f
is_in	libft/srcs/libft/ft_strsplit.c	/^static int		is_in(char h, char *str)$/;"	f	file:
is_spec_upper	libft/srcs/getters.c	/^int		is_spec_upper(char c)$/;"	f
is_type	libft/srcs/getters.c	/^int		is_type(char **format, t_arg *specs)$/;"	f
is_valid_type	libft/srcs/helpers/utils.c	/^int		is_valid_type(char c)$/;"	f
isprint_special	libft/srcs/isprint_special.c	/^int		isprint_special(char c)$/;"	f
l	libft/includes/ft_printf.h	/^	int			l;$/;"	m	struct:s_arg
l_min	libft/srcs/ft_itoa/ft_litoa.c	/^static void		l_min(t_arg *specs)$/;"	f	file:
ld_to_string	libft/srcs/formats/format_float.c	/^static void	ld_to_string(t_arg *specs, long double f)$/;"	f	file:
left	libft/includes/ft_printf.h	/^	int			left;$/;"	m	struct:s_arg
len	includes/ft_select.h	/^	int					len;$/;"	m	struct:s_arg_list
ll_min	libft/srcs/ft_itoa/ft_llitoa.c	/^static void		ll_min(t_arg *specs)$/;"	f	file:
main	libterm/main.c	/^int	main(int ac, char **av)$/;"	f
main	srcs/main.c	/^int	main(int ac, char **av)$/;"	f
mall_len	libft/includes/ft_printf.h	/^	int			mall_len;$/;"	m	struct:s_arg
malloc_error	libft/srcs/libft/ft_strnew.c	/^static char	*malloc_error(void)$/;"	f	file:
malloc_string	libft/srcs/spec_init.c	/^void	malloc_string(t_arg *specs, int len)$/;"	f
max	libft/srcs/helpers/utils.c	/^int		max(int a, int b)$/;"	f
max_list	libft/srcs/libft/ft_lstrmdup.c	/^static size_t	max_list(t_list *a, t_list *b)$/;"	f	file:
max_list	libft/srcs/libft/ft_lstsort.c	/^static	size_t	max_list(t_list *a, t_list *b)$/;"	f	file:
min	libft/srcs/helpers/utils.c	/^int		min(int a, int b)$/;"	f
min_int	libft/srcs/libft/ft_itoa.c	/^static char	*min_int(char *res)$/;"	f	file:
name	includes/ft_select.h	/^	char				*name;$/;"	m	struct:s_arg_list
next	includes/ft_select.h	/^	struct s_arg_list	*next;$/;"	m	struct:s_arg_list	typeref:struct:s_arg_list::s_arg_list
next	libft/includes/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
null_data	libft/srcs/helpers/null_data.c	/^int		null_data(t_arg *specs, ULL value)$/;"	f
origin	libft/includes/ft_printf.h	/^	char		*origin;$/;"	m	struct:s_arg
ox_helper	libft/srcs/conversion/conv_helper.c	/^static char		*ox_helper(t_arg *specs)$/;"	f	file:
ox_len	libft/srcs/conversion/conv_helper.c	/^int				ox_len(t_arg *specs)$/;"	f
parse_struct	libft/srcs/parse_struct.c	/^int		parse_struct(t_arg *specs, va_list *arg)$/;"	f
plus	libft/includes/ft_printf.h	/^	int			plus;$/;"	m	struct:s_arg
precision	libft/includes/ft_printf.h	/^	int			precision;$/;"	m	struct:s_arg
precision_len	libft/includes/ft_printf.h	/^	int			precision_len;$/;"	m	struct:s_arg
prev	includes/ft_select.h	/^	struct s_arg_list	*prev;$/;"	m	struct:s_arg_list	typeref:struct:s_arg_list::s_arg_list
print_arg_list	srcs/linked_list.c	/^void		print_arg_list(t_list_addr *addr)$/;"	f
print_perc	libft/srcs/parse_struct.c	/^int		print_perc(t_arg *specs, char c)$/;"	f
put_ox	libft/srcs/conversion/conv_helper.c	/^void			put_ox(t_arg *specs, char *value, int *perc_len, int modif)$/;"	f
realloc_if_necessary	libft/srcs/spec_init.c	/^void	realloc_if_necessary(t_arg *specs, int len)$/;"	f
reset_specs	libft/srcs/spec_init.c	/^void	reset_specs(t_arg *specs)$/;"	f
reset_terminal	libterm/srcs/termcap_settings.c	/^int			reset_terminal(struct termios *saved_attributes)$/;"	f
right_trim	libft/srcs/libft/ft_strtrim.c	/^static	size_t		right_trim(char const *s)$/;"	f	file:
row	libterm/includes/libterm.h	/^				int	row;$/;"	m	struct:s_pos
s_arg	libft/includes/ft_printf.h	/^typedef struct	s_arg$/;"	s
s_arg_list	includes/ft_select.h	/^typedef struct	s_arg_list {$/;"	s
s_list	libft/includes/libft.h	/^typedef	struct	s_list$/;"	s
s_list_addr	includes/ft_select.h	/^typedef struct	s_list_addr {$/;"	s
s_pos	libterm/includes/libterm.h	/^typedef struct	s_pos {$/;"	s
set_data_len	libft/srcs/set_data_len.c	/^void	set_data_len(t_arg *specs, LL value)$/;"	f
set_extra	libft/srcs/helpers/utils.c	/^void	set_extra(char c, t_arg *specs)$/;"	f
set_float_len	libft/srcs/formats/format_float.c	/^static int	set_float_len(t_arg *specs, double f)$/;"	f	file:
set_i	libft/srcs/helpers/float_helper.c	/^int		set_i(t_arg *specs)$/;"	f
set_ld_len	libft/srcs/formats/format_float.c	/^static int	set_ld_len(t_arg *specs, long double f)$/;"	f	file:
setup_terminal	libterm/srcs/termcap_settings.c	/^int			setup_terminal(struct termios *saved_attributes)$/;"	f
sign_len	libft/srcs/formats/format_int.c	/^static char			sign_len(t_arg *specs, LL value)$/;"	f	file:
sorted_merge	libft/srcs/libft/ft_lstsort.c	/^static	t_list	*sorted_merge(t_list *a, t_list *b)$/;"	f	file:
string	libft/includes/ft_printf.h	/^	char		*string;$/;"	m	struct:s_arg
t_arg	libft/includes/ft_printf.h	/^}				t_arg;$/;"	t	typeref:struct:s_arg
t_arg_list	includes/ft_select.h	/^}				t_arg_list;$/;"	t	typeref:struct:s_arg_list
t_list	libft/includes/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
t_list_addr	includes/ft_select.h	/^}				t_list_addr;$/;"	t	typeref:struct:s_list_addr
t_pos	libterm/includes/libterm.h	/^}				t_pos;$/;"	t	typeref:struct:s_pos
tail	includes/ft_select.h	/^	struct s_arg_list	*tail;$/;"	m	struct:s_list_addr	typeref:struct:s_list_addr::s_arg_list
type	libft/includes/ft_printf.h	/^	char		type;$/;"	m	struct:s_arg
ulen	libft/srcs/get_len/get_ulen.c	/^int		ulen(t_arg *specs, ULL n)$/;"	f
valid_flags	libft/srcs/helpers/utils.c	/^int		valid_flags(char **format)$/;"	f
value_d	libft/srcs/helpers/values.c	/^void	value_d(t_arg *specs, LL value)$/;"	f
value_o	libft/srcs/helpers/values.c	/^void	value_o(t_arg *specs, LL value)$/;"	f
value_u	libft/srcs/helpers/values.c	/^void	value_u(t_arg *specs, ULL value)$/;"	f
value_x	libft/srcs/helpers/values.c	/^void	value_x(t_arg *specs, LL value)$/;"	f
value_xx	libft/srcs/helpers/values.c	/^void	value_xx(t_arg *specs, LL value)$/;"	f
width	libft/includes/ft_printf.h	/^	int			width;$/;"	m	struct:s_arg
width_len	libft/includes/ft_printf.h	/^	int			width_len;$/;"	m	struct:s_arg
wildcard	libft/srcs/wildcard.c	/^void	wildcard(t_arg *specs, va_list *arg, int modif)$/;"	f
write_data	libft/srcs/ft_printf.c	/^static	int		write_data(t_arg *specs, int total_len)$/;"	f	file:
